/*Generated by glloader.lua*/
#ifndef _GL1BIND_H_
#define _GL1BIND_H_
#if !defined (_GL1BIND_IMP_) && !defined (__gl_h_)
#error "Included 'gl1bind.h' before the GL header!"
#endif
/*internal function pointers*/
extern GLenum (APIENTRY *_dl_glGetError) ( void );
extern const GLubyte* (APIENTRY *_dl_glGetString) ( GLenum name );
extern void (APIENTRY *_dl_glActiveTexture) ( GLenum texture );
extern void (APIENTRY *_dl_glAlphaFunc) ( GLenum func, GLclampf ref );
extern void (APIENTRY *_dl_glBindBuffer) (GLenum target, GLuint buffer);
extern void (APIENTRY *_dl_glBindTexture) ( GLenum target, GLuint texture );
extern void (APIENTRY *_dl_glBlendFunc) ( GLenum sfactor, GLenum dfactor );
extern void (APIENTRY *_dl_glBufferData) (GLenum target, GLsizeiptr size, const void *data, GLenum usage);
extern void (APIENTRY *_dl_glBufferSubData) (GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
extern void (APIENTRY *_dl_glBufferSubDataARB) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data);
extern void (APIENTRY *_dl_glClear) ( GLbitfield mask );
extern void (APIENTRY *_dl_glClearColor) ( GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha );
extern void (APIENTRY *_dl_glClearDepthf) (GLfloat d);
extern void (APIENTRY *_dl_glClearStencil) ( GLint s );
extern void (APIENTRY *_dl_glClientActiveTexture) ( GLenum texture );
extern void (APIENTRY *_dl_glColor4f) ( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
extern void (APIENTRY *_dl_glColorMask) ( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha );
extern void (APIENTRY *_dl_glColorPointer) ( GLint size, GLenum type, GLsizei stride, const GLvoid *ptr );
extern void (APIENTRY *_dl_glCompressedTexImage2D) ( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data );
extern void (APIENTRY *_dl_glCompressedTexSubImage2D) ( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data );
extern void (APIENTRY *_dl_glCopyTexImage2D) ( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );
extern void (APIENTRY *_dl_glCopyTexSubImage2D) ( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
extern void (APIENTRY *_dl_glCullFace) ( GLenum mode );
extern void (APIENTRY *_dl_glDeleteBuffers) (GLsizei n, const GLuint *buffers);
extern void (APIENTRY *_dl_glDeleteTextures) ( GLsizei n, const GLuint *textures);
extern void (APIENTRY *_dl_glDepthFunc) ( GLenum func );
extern void (APIENTRY *_dl_glDepthMask) ( GLboolean flag );
extern void (APIENTRY *_dl_glDepthRange) ( GLclampd near_val, GLclampd far_val );
extern void (APIENTRY *_dl_glDisable) ( GLenum cap );
extern void (APIENTRY *_dl_glDisableClientState) ( GLenum cap );
extern void (APIENTRY *_dl_glDrawArrays) ( GLenum mode, GLint first, GLsizei count );
extern void (APIENTRY *_dl_glDrawElements) ( GLenum mode, GLsizei count, GLenum type, const GLvoid *indices );
extern void (APIENTRY *_dl_glEnable) ( GLenum cap );
extern void (APIENTRY *_dl_glEnableClientState) ( GLenum cap );
extern void (APIENTRY *_dl_glFinish) ( void );
extern void (APIENTRY *_dl_glFlush) ( void );
extern void (APIENTRY *_dl_glFogf) ( GLenum pname, GLfloat param );
extern void (APIENTRY *_dl_glFogfv) ( GLenum pname, const GLfloat *params );
extern void (APIENTRY *_dl_glFrontFace) ( GLenum mode );
extern void (APIENTRY *_dl_glFrustum) ( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val );
extern void (APIENTRY *_dl_glGenBuffers) (GLsizei n, GLuint *buffers);
extern void (APIENTRY *_dl_glGenTextures) ( GLsizei n, GLuint *textures );
extern void (APIENTRY *_dl_glGetFloatv) ( GLenum pname, GLfloat *params );
extern void (APIENTRY *_dl_glGetIntegerv) ( GLenum pname, GLint *params );
extern void (APIENTRY *_dl_glHint) ( GLenum target, GLenum mode );
extern void (APIENTRY *_dl_glLightModelf) ( GLenum pname, GLfloat param );
extern void (APIENTRY *_dl_glLightModelfv) ( GLenum pname, const GLfloat *params );
extern void (APIENTRY *_dl_glLightf) ( GLenum light, GLenum pname, GLfloat param );
extern void (APIENTRY *_dl_glLightfv) ( GLenum light, GLenum pname, const GLfloat *params );
extern void (APIENTRY *_dl_glLineWidth) ( GLfloat width );
extern void (APIENTRY *_dl_glLoadIdentity) ( void );
extern void (APIENTRY *_dl_glLoadMatrixf) ( const GLfloat *m );
extern void (APIENTRY *_dl_glLogicOp) ( GLenum opcode );
extern void (APIENTRY *_dl_glMaterialf) ( GLenum face, GLenum pname, GLfloat param );
extern void (APIENTRY *_dl_glMaterialfv) ( GLenum face, GLenum pname, const GLfloat *params );
extern void (APIENTRY *_dl_glMatrixMode) ( GLenum mode );
extern void (APIENTRY *_dl_glMultMatrixf) ( const GLfloat *m );
extern void (APIENTRY *_dl_glMultiTexCoord4f) ( GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q );
extern void (APIENTRY *_dl_glNormal3f) ( GLfloat nx, GLfloat ny, GLfloat nz );
extern void (APIENTRY *_dl_glNormalPointer) ( GLenum type, GLsizei stride, const GLvoid *ptr );
extern void (APIENTRY *_dl_glOrtho) ( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val );
extern void (APIENTRY *_dl_glPixelStorei) ( GLenum pname, GLint param );
extern void (APIENTRY *_dl_glPointParameterf) (GLenum pname, GLfloat param);
extern void (APIENTRY *_dl_glPointParameterfv) (GLenum pname, const GLfloat *params);
extern void (APIENTRY *_dl_glPointSize) ( GLfloat size );
extern void (APIENTRY *_dl_glPolygonOffset) ( GLfloat factor, GLfloat units );
extern void (APIENTRY *_dl_glPopMatrix) ( void );
extern void (APIENTRY *_dl_glPushMatrix) ( void );
extern void (APIENTRY *_dl_glReadPixels) ( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels );
extern void (APIENTRY *_dl_glRotatef) ( GLfloat angle, GLfloat x, GLfloat y, GLfloat z );
extern void (APIENTRY *_dl_glSampleCoverage) ( GLclampf value, GLboolean invert );
extern void (APIENTRY *_dl_glScalef) ( GLfloat x, GLfloat y, GLfloat z );
extern void (APIENTRY *_dl_glScissor) ( GLint x, GLint y, GLsizei width, GLsizei height);
extern void (APIENTRY *_dl_glShadeModel) ( GLenum mode );
extern void (APIENTRY *_dl_glStencilFunc) ( GLenum func, GLint ref, GLuint mask );
extern void (APIENTRY *_dl_glStencilMask) ( GLuint mask );
extern void (APIENTRY *_dl_glStencilOp) ( GLenum fail, GLenum zfail, GLenum zpass );
extern void (APIENTRY *_dl_glTexCoordPointer) ( GLint size, GLenum type, GLsizei stride, const GLvoid *ptr );
extern void (APIENTRY *_dl_glTexEnvf) ( GLenum target, GLenum pname, GLfloat param );
extern void (APIENTRY *_dl_glTexEnvfv) ( GLenum target, GLenum pname, const GLfloat *params );
extern void (APIENTRY *_dl_glTexImage2D) ( GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels );
extern void (APIENTRY *_dl_glTexParameterf) ( GLenum target, GLenum pname, GLfloat param );
extern void (APIENTRY *_dl_glTexParameteri) ( GLenum target, GLenum pname, GLint param );
extern void (APIENTRY *_dl_glTexSubImage2D) ( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels );
extern void (APIENTRY *_dl_glTranslatef) ( GLfloat x, GLfloat y, GLfloat z );
extern void (APIENTRY *_dl_glVertexPointer) ( GLint size, GLenum type, GLsizei stride, const GLvoid *ptr );
extern void (APIENTRY *_dl_glViewport) ( GLint x, GLint y, GLsizei width, GLsizei height );
/*Alias gl* functions to the internal function pointers*/
#define glActiveTexture _dl_glActiveTexture
#define glAlphaFunc _dl_glAlphaFunc
#define glBindBuffer _dl_glBindBuffer
#define glBindTexture _dl_glBindTexture
#define glBlendFunc _dl_glBlendFunc
#define glBufferData _dl_glBufferData
#define glBufferSubData _dl_glBufferSubData
#define glBufferSubDataARB _dl_glBufferSubDataARB
#define glClear _dl_glClear
#define glClearColor _dl_glClearColor
#define glClearDepthf _dl_glClearDepthf
#define glClearStencil _dl_glClearStencil
#define glClientActiveTexture _dl_glClientActiveTexture
#define glColor4f _dl_glColor4f
#define glColorMask _dl_glColorMask
#define glColorPointer _dl_glColorPointer
#define glCompressedTexImage2D _dl_glCompressedTexImage2D
#define glCompressedTexSubImage2D _dl_glCompressedTexSubImage2D
#define glCopyTexImage2D _dl_glCopyTexImage2D
#define glCopyTexSubImage2D _dl_glCopyTexSubImage2D
#define glCullFace _dl_glCullFace
#define glDeleteBuffers _dl_glDeleteBuffers
#define glDeleteTextures _dl_glDeleteTextures
#define glDepthFunc _dl_glDepthFunc
#define glDepthMask _dl_glDepthMask
#define glDepthRange _dl_glDepthRange
#define glDisable _dl_glDisable
#define glDisableClientState _dl_glDisableClientState
#define glDrawArrays _dl_glDrawArrays
#define glDrawElements _dl_glDrawElements
#define glEnable _dl_glEnable
#define glEnableClientState _dl_glEnableClientState
#define glFinish _dl_glFinish
#define glFlush _dl_glFlush
#define glFogf _dl_glFogf
#define glFogfv _dl_glFogfv
#define glFrontFace _dl_glFrontFace
#define glFrustum _dl_glFrustum
#define glGenBuffers _dl_glGenBuffers
#define glGenTextures _dl_glGenTextures
#define glGetError _dl_glGetError
#define glGetFloatv _dl_glGetFloatv
#define glGetIntegerv _dl_glGetIntegerv
#define glGetString _dl_glGetString
#define glHint _dl_glHint
#define glLightModelf _dl_glLightModelf
#define glLightModelfv _dl_glLightModelfv
#define glLightf _dl_glLightf
#define glLightfv _dl_glLightfv
#define glLineWidth _dl_glLineWidth
#define glLoadIdentity _dl_glLoadIdentity
#define glLoadMatrixf _dl_glLoadMatrixf
#define glLogicOp _dl_glLogicOp
#define glMaterialf _dl_glMaterialf
#define glMaterialfv _dl_glMaterialfv
#define glMatrixMode _dl_glMatrixMode
#define glMultMatrixf _dl_glMultMatrixf
#define glMultiTexCoord4f _dl_glMultiTexCoord4f
#define glNormal3f _dl_glNormal3f
#define glNormalPointer _dl_glNormalPointer
#define glOrtho _dl_glOrtho
#define glPixelStorei _dl_glPixelStorei
#define glPointParameterf _dl_glPointParameterf
#define glPointParameterfv _dl_glPointParameterfv
#define glPointSize _dl_glPointSize
#define glPolygonOffset _dl_glPolygonOffset
#define glPopMatrix _dl_glPopMatrix
#define glPushMatrix _dl_glPushMatrix
#define glReadPixels _dl_glReadPixels
#define glRotatef _dl_glRotatef
#define glSampleCoverage _dl_glSampleCoverage
#define glScalef _dl_glScalef
#define glScissor _dl_glScissor
#define glShadeModel _dl_glShadeModel
#define glStencilFunc _dl_glStencilFunc
#define glStencilMask _dl_glStencilMask
#define glStencilOp _dl_glStencilOp
#define glTexCoordPointer _dl_glTexCoordPointer
#define glTexEnvf _dl_glTexEnvf
#define glTexEnvfv _dl_glTexEnvfv
#define glTexImage2D _dl_glTexImage2D
#define glTexParameterf _dl_glTexParameterf
#define glTexParameteri _dl_glTexParameteri
#define glTexSubImage2D _dl_glTexSubImage2D
#define glTranslatef _dl_glTranslatef
#define glVertexPointer _dl_glVertexPointer
#define glViewport _dl_glViewport
int gl1bind_load (void);
#endif